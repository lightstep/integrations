receivers:
{{- range . }}
{{- if eq .Type "db" }}
  {{ .Name }}:
    username: {{ .DB.Username }}
    password: {{ .DB.Password }}
{{- else if eq .Type "prometheus" }}
  prometheus/{{ .Name }}:
    {{- if not .Prometheus.UseStartTimeMetric }}
    use_start_time_metric: {{ .Prometheus.UseStartTimeMetric }}
    {{- end }}
    {{- if .Prometheus.StartTimeMetricRegex }}
    start_time_metric_regex: '{{ .Prometheus.StartTimeMetricRegex }}'
    {{- end }}
    config:
      scrape_configs:
        - job_name: '{{ .Prometheus.JobName }}'
          scrape_interval: {{ .Prometheus.ScrapeInterval }}
          metrics_path: '{{ .Prometheus.MetricsPath }}'
          {{- if .Prometheus.Scheme }}
          scheme: '{{ .Prometheus.Scheme }}'
          {{- end }}
          {{- if .Prometheus.InsecureSkipVerify }}
          tls_config:
            insecure_skip_verify: {{ .Prometheus.InsecureSkipVerify }}
          {{- end }}
          static_configs:
            - targets: [{{ range .Prometheus.Targets }}"{{ . }}", {{ end }}]
{{- else if eq .Type "jmx" }}
  jmx/{{ .Name }}:
    jar_path: {{ .JMX.JarPath }}
    endpoint: {{ .JMX.Endpoint }}
    target_system: {{ .JMX.TargetSystem }}
    collection_interval: {{ .JMX.CollectionInterval }}
{{- else if eq .Type "statsd" }}
  statsd:
    endpoint: "{{ .Statsd.Endpoint }}"
    aggregation_interval: {{ .Statsd.AggregationInterval }}
    enable_metric_type: {{ .Statsd.EnableMetricType }}
    is_monotonic_counter: {{ .Statsd.IsMonotonicCounter }}
    timer_histogram_mapping:
    {{- range .Statsd.TimerHistogramMapping }}
      - statsd_type: "{{ .StatsdType }}"
        observer_type: "{{ .ObserverType }}"
    {{- end }}
{{- end }}
{{- end }}

exporters:
  logging:
    loglevel: debug
  otlp/public:
    endpoint: ingest.lightstep.com:443
    headers:
        "lightstep-access-token": {{.EnvVar}}

processors:
  batch:

service:
  pipelines:
    metrics:
      receivers: [{{ range . }}{{ .Name }}, {{ end }}]
      processors: [batch]
      exporters: [otlp/public, logging]